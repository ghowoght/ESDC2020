#include <iostream>
#include <string>
#include <sstream>
using namespace std;

#include<eigen3/Eigen/Core>
#include<eigen3/Eigen/Geometry>

#include "ros/ros.h"
#include "std_msgs/String.h"

#include "geometry_msgs/PoseStamped.h"

#include <tf/transform_broadcaster.h>
// #include <tf/transform_lisener.h>

void pose_callback(const geometry_msgs::PoseStamped::ConstPtr& pose_msg)
{
    ROS_INFO("%f", pose_msg->pose.position.x);
     geometry_msgs::PoseStamped pose;
    pose.pose.orientation.w = 1;
    Eigen::Quaterniond q(pose.pose.orientation.x, pose.pose.orientation.y, pose.pose.orientation.z, pose.pose.orientation.w);
    Eigen::Vector3d t(pose.pose.position.x, pose.pose.position.y, pose.pose.position.z);

    Eigen::Vector3d p(1, 1, 1); 

    Eigen::Vector3d pw;

    Eigen::Isometry3d T = Eigen::Isometry3d::Identity();

    q.normalize();

    T.rotate(q);
    T.pretranslate(t);

    pw = T.inverse() * p;

    // cout << pw.transpose() << endl;
}

int main(int argc, char** argv)
{
    ros::init(argc, argv, "semantic_tagging");
    ros::NodeHandle nh;
	ros::Subscriber sub_pose = nh.subscribe("/rtabmap/goal_out", 10, pose_callback);

    while(ros::ok())
    {
        ros::spin();
    }

}


